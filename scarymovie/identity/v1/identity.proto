syntax = "proto3";

package scarymovie.identity.v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/scarymovie/protos/scarymovie/identity/v1;identitypb";

// ───────────────────────────────── service ──────────────────────────────────
service IdentityService {
  // Регистрация пользователя
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/identity/register"
      body: "*"
    };
  }

  // Логин (аутентификация)
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {
      post: "/v1/identity/authenticate"
      body: "*"
    };
  }

  // Обновление (refresh) токенов
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/identity/refresh"
      body: "*"
    };
  }

  // Отзыв токенов (logout во всех/одной сессии)
  rpc RevokeToken(RevokeTokenRequest) returns (RevokeTokenResponse) {
    option (google.api.http) = {
      post: "/v1/identity/revoke"
      body: "*"
    };
  }

  // Проверка токена — вызывают gateway‑service и hub‑service
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {
    // HTTP‑маршрут не нужен, вызывается gRPC‑клиентами
  }

  // CRUD профиля текущего пользователя
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {
    option (google.api.http) = { get: "/v1/identity/profile" };
  }
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {
    option (google.api.http) = {
      patch: "/v1/identity/profile"
      body: "*"
    };
  }
  rpc DeleteProfile(DeleteProfileRequest) returns (DeleteProfileResponse) {
    option (google.api.http) = { delete: "/v1/identity/profile" };
  }
}

// ─────────────────────────────── messages ───────────────────────────────────
// --- Requests ---------------------------------------------------------------
message RegisterRequest {
  string email      = 1 [(validate.rules).string = {email: true, ignore_empty: false}];
  string password   = 2 [(validate.rules).string = {min_len: 8, max_len: 128}];
  string full_name  = 3 [(validate.rules).string = {min_len: 2, max_len: 255}];
}

message AuthenticateRequest {
  string email    = 1;
  string password = 2;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RevokeTokenRequest {
  // если строка пустая – отзываем все refresh‑токены пользователя
  string refresh_token = 1;
}

message ValidateTokenRequest {
  string access_token = 1;
}

message GetProfileRequest {} // контекст берётся из access‑токена

message UpdateProfileRequest {
  string full_name = 1;
  // при необходимости можно добавить phone, avatar_url и т.п.
}

message DeleteProfileRequest {}

// --- Responses --------------------------------------------------------------
message RegisterResponse {
  AuthPayload auth = 1;
}

message AuthenticateResponse {
  AuthPayload auth = 1;
}

message RefreshTokenResponse {
  AuthPayload auth = 1;
}

message RevokeTokenResponse {} // пусто, но уникальный тип

message ValidateTokenResponse {
  string user_id               = 1;
  google.protobuf.Timestamp expires_at = 2;
  bool   valid                 = 3;
  string reason                = 4; // если !valid
}

message GetProfileResponse {
  Profile profile = 1;
}

message UpdateProfileResponse {
  Profile profile = 1;
}

message DeleteProfileResponse {}

// --- Common DTOs ------------------------------------------------------------
message AuthPayload {
  string user_id               = 1;
  string access_token          = 2;
  string refresh_token         = 3;
  google.protobuf.Timestamp access_expires_at  = 4;
  google.protobuf.Timestamp refresh_expires_at = 5;
}

message Profile {
  string user_id               = 1;
  string email                 = 2;
  string full_name             = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}
